
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>teams on somethingAzure</title>
   <link>https://blog.somethingAzure.com/tags/teams/</link>
   <description>Recent content in teams on somethingAzure</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <managingEditor>bas@vd-sande.nl (Bas van de Sande)</managingEditor>
   <webMaster>bas@vd-sande.nl (Bas van de Sande)</webMaster>
   <copyright>Copyright &amp;copy; 2021 - Bas van de Sande</copyright>
   <lastBuildDate>Sat, 11 Sep 2021 19:46:30 +0200</lastBuildDate>
   
       <atom:link href="https://blog.somethingAzure.com/tags/teams/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Multi-staged GitHub Pipeline</title>
       <link>https://blog.somethingAzure.com/posts/mutistage-gh-pipeline/</link>
       <pubDate>Sat, 11 Sep 2021 19:46:30 +0200</pubDate>
       <author>bas@vd-sande.nl (Bas van de Sande)</author>
       <guid>https://blog.somethingAzure.com/posts/mutistage-gh-pipeline/</guid>
       <description>&lt;p&gt;At the moment I&amp;rsquo;m working on some infrastructure pipelines to build and deploy Azure infrastructure for one of our clients. For me a cool project as I&amp;rsquo;m learning to work with technologies such as Bicep and GitHub actions. In this project we use GitHub actions for the CI/CD process. In this process every time a pull request is merged in the main branch, an automated build, test and deployment process is triggered.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://blog.somethingAzure.com/multistage/ms1.png&#34; alt=&#34;#multistage&#34;&gt;&lt;/p&gt;&lt;p&gt;In this project we have three environments:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;testthe deployment to this environment should be automatically after each build and merge into main.&lt;/li&gt;&lt;li&gt;acceptancethe deployment to this environment should only take place after an approval.&lt;/li&gt;&lt;li&gt;productionthe deployment to this environment should only take place after an approval.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Unfortunately, the stage approvals are only part of the enterprise license, and not of the paid team license we use. I was slightly disappointed and during last weekend I got this little idea&amp;hellip;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;How about simulating the approval process?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;GitHub actions supports &amp;ldquo;Inputs&amp;rdquo;. Inputs are values that have to be set when triggering a workflow. In case a worklow is triggered automatically, the default values are being used. In case the workflow is triggered manually, the user is presented with a popup dialog in which the user has to fill in the values.&lt;/p&gt;&lt;p&gt;This gives the user the option to deploy a build to other environments as well. In the example below, I have the option to either deploy to the acceptance and/or production environment; once the build and deploy to test succeeded.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://blog.somethingAzure.com/multistage/ms3.png&#34; alt=&#34;#multistage&#34;&gt;&lt;/p&gt;&lt;p&gt;However  In the flow presented above, you cannot deploy to production if you don&amp;rsquo;t deploy to acceptance. To overcome this issue, the yaml needs to be altered, that the deployment for both the acceptance and deployment stage depend on a succeeding deployment in the test environment.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://blog.somethingAzure.com/multistage/ms2.png&#34; alt=&#34;#multistage&#34;&gt;&lt;/p&gt;&lt;p&gt;To do this, the yaml script has to be setup like this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my multi staged hub infra deployment&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set environment variables that are being used in the workflows&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:  &lt;span style=&#34;color:#f92672&#34;&gt;LOCATION&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;WestEurope&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;CLI_VERSION&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2.21.0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:  &lt;span style=&#34;color:#f92672&#34;&gt;push&lt;/span&gt;:    &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;master ]&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Infra/Modules/**&amp;#39;&lt;/span&gt;    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Infra/Deployments/hub/**&amp;#39;&lt;/span&gt;    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.github/workflows/hub.yml&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Allows you to run this workflow manually from the Actions tab&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;workflow_dispatch&lt;/span&gt;:    &lt;span style=&#34;color:#f92672&#34;&gt;inputs&lt;/span&gt;:      &lt;span style=&#34;color:#f92672&#34;&gt;acceptance&lt;/span&gt;:        &lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Deploy to Acceptance (yes/no)?&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;required&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no&amp;#39;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;production&lt;/span&gt;:        &lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Deploy to production (yes/no)?&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;required&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:  &lt;span style=&#34;color:#f92672&#34;&gt;build-hub&lt;/span&gt;:    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build Hub&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;if&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;github.event_name == &amp;#39;push&amp;#39; || (github.event_name == &amp;#39;pull_request&amp;#39; &amp;amp;&amp;amp; github.event.action != &amp;#39;closed&amp;#39;) || github.event_name == &amp;#39;repository_dispatch&amp;#39; || github.event_name == &amp;#39;workflow_dispatch&amp;#39;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Checkout files&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v2&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;test-provision-hub&lt;/span&gt;:    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TEST - Provision Hub&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;needs&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build-hub&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Download artifacts&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/download-artifact@v2&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;drop&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;src&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;acc-provision-hub&lt;/span&gt;:    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ACC - Provision Hub &lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;if&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;github.event.inputs.acceptance == &amp;#39;yes&amp;#39;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;acc  &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# defined environment with protection rules added&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;needs&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test-provision-hub&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Download artifacts&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/download-artifact@v2&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;drop&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;src&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;...&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;prod-provision-hub&lt;/span&gt;:    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PROD - Provision Hub &lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;if&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;github.event.inputs.production == &amp;#39;yes&amp;#39;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prod &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# defined environment with protection rules added&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;needs&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test-provision-hub&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Download artifacts&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/download-artifact@v2&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;drop&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;src&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For now this workaround will do fine, however I&amp;rsquo;m not so happy with the omission of the multi stage approval in the GitHub Teams subscription. For that reason I contacted a GitHub representative and had a little chat with him. He told me that the focus within GitHub is the Enterprise edition. He advised me to contact GitHub support for this matter. I guess that is going to be my next step.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Certification Renewal</title>
       <link>https://blog.somethingAzure.com/posts/certification-renewal/</link>
       <pubDate>Mon, 09 Aug 2021 19:30:08 +0200</pubDate>
       <author>bas@vd-sande.nl (Bas van de Sande)</author>
       <guid>https://blog.somethingAzure.com/posts/certification-renewal/</guid>
       <description>&lt;p&gt;When Microsoft introduced the new role based certifaction paths, a new expiration policy was set as well. After two years (as of july 2021, one year) the certification will expire, and you have to renew it in order to keep it.&lt;/p&gt;&lt;p&gt;At the time, I was among the first people who passed the new certifications and back then the new expiration policy was unclear. There was no information on how to renew the certifications and costs involved, until a few weeks ago&amp;hellip;&lt;/p&gt;&lt;p&gt;Out of the blue an e-mail arrived in my mailbox, indicating that I had 180 days remaining to renew the certification. In the timespan of 180 days you can take as many attempts to pass the renewal as you need at no cost! If you don&amp;rsquo;t manage to pass the renewal test, you have to redo all exams if you want to keep the certification.The first two attempts can be done directly after each other. After the second attempt you have to wait for 24 hours, before you can do the next renewal test.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://blog.somethingAzure.com/cert/renew-2.png&#34; alt=&#34;#mslearn&#34;&gt;&lt;/p&gt;&lt;p&gt;By following the link in the mail, you are being redirected to the Microsoft Learn environment in which you can find a relative short recap of all topics that can be covered in the test. Or if you feel lucky, you can go ahead and start the test right-away.&lt;/p&gt;&lt;p&gt;The test is not as exhaustive as the certification exam and does not contain labs or cases. Instead the test is a collection of multiple choice questions that you can complete from within your browser. Each question describes a different scenario and requires thorough subject knowledge. &lt;strong&gt;Be prepared!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;In order to pass, you need to have a score of 65% or higher. The solution architect exam has 26 questions, that have to be answered within 45 minutes. I guess other tests have similar numbers.&lt;/p&gt;&lt;p&gt;The questions in the test are under NDA, and you have to consent in order to start the test. Once successfully completed, you get the following message&amp;hellip;&lt;/p&gt;&lt;p&gt;Good to go for another year!&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://blog.somethingAzure.com/cert/renew-3.png&#34; alt=&#34;#passed&#34;&gt;&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>DevOps All the Way</title>
       <link>https://blog.somethingAzure.com/posts/devops-all-the-way/</link>
       <pubDate>Fri, 30 Jul 2021 09:00:06 +0200</pubDate>
       <author>bas@vd-sande.nl (Bas van de Sande)</author>
       <guid>https://blog.somethingAzure.com/posts/devops-all-the-way/</guid>
       <description>&lt;p&gt;In &lt;a href=&#34;https://blog.somethingAzure.com/posts/practice-what-you-preach/&#34; title=&#34;Practice what you Preach&#34;&gt;Practice what you preach&lt;/a&gt; I wrote that I decided to host my blog on the Azure platform, using Hugo as content management system, Blob Storage and Azure CDN for hosting the blog. The only thing lacking is a workflow of writing content, approving it and publishing it on the web.&lt;/p&gt;&lt;p&gt;As I work for a &lt;a href=&#34;https://www.xpirit.com&#34;&gt;company&lt;/a&gt; that specialized on Azure and DevOps, I decided to take the plunge and go DevOps all the way. Doing some googling, I found out that there were some great tutorials out there to use an Azure DevOps CI/CD pipeline in combination with Hugo to compile and publish the blog. As a starter I followed this &lt;a href=&#34;https://medium.com/@kurtmkurtm/setting-up-a-blog-with-the-hugo-framework-on-azure-blob-storage-12605609a90&#34;&gt;writing&lt;/a&gt; by kurtmkurtm.&lt;/p&gt;&lt;p&gt;There was however one part of the instruction I wasn&amp;rsquo;t happy with. In the description the author created a CI pipeline using a yaml pipeline, the CD release pipeline was setup by clicking it together. In a DevOps world you have to automate as much as possible to make it repeatable in an easy way (building, testing, deploying). Personally, I consider a CI/CD pipeline as a part of the code you write, thus it needs to be in code (and not in a hybrid fashion).&lt;/p&gt;&lt;p&gt;What I did, was adding stages to the original pipeline. One stage for build and one stage for deployment.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Azure pipeline to build and publishe a hugo blog release&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# github.com/kurtmkurtm&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# modified by Bas van de Sande&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;trigger&lt;/span&gt;:- &lt;span style=&#34;color:#ae81ff&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;pool&lt;/span&gt;:  &lt;span style=&#34;color:#f92672&#34;&gt;vmImage&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ubuntu-latest&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;variables&lt;/span&gt;:- &lt;span style=&#34;color:#f92672&#34;&gt;group&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;blogvars&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;stages&lt;/span&gt;:- &lt;span style=&#34;color:#f92672&#34;&gt;stage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Generateblog&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Generate Blog&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:  - &lt;span style=&#34;color:#f92672&#34;&gt;job&lt;/span&gt;:     &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Generate Blog&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:    - &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;wget -c https://github.com/gohugoio/hugo/releases/download/v$(hugo.version)/hugo_$(hugo.version)_Linux-64bit.deb   &lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Download HUGO&amp;#39;&lt;/span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sudo dpkg -i hugo_$(hugo.version)_Linux-64bit.deb&amp;#39;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Install HUGO&amp;#39;&lt;/span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        cd $(blog.path)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        hugo  --log -v&lt;/span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Generate Blog&amp;#39;&lt;/span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;task&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;CopyFiles@2&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Copy Blog&amp;#39;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;inputs&lt;/span&gt;:        &lt;span style=&#34;color:#f92672&#34;&gt;SourceFolder&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(blog.path)/public&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;Contents&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;**&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;TargetFolder&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(Build.ArtifactStagingDirectory)&amp;#39;&lt;/span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;task&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PublishBuildArtifacts@1&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Publish Artifacts&amp;#39;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;inputs&lt;/span&gt;:        &lt;span style=&#34;color:#f92672&#34;&gt;PathtoPublish&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(Build.ArtifactStagingDirectory)&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;ArtifactName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;drop&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;publishLocation&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Container&amp;#39;&lt;/span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;stage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PubllishBlog&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Publish Blog&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:  - &lt;span style=&#34;color:#f92672&#34;&gt;job&lt;/span&gt;:    &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Publish Blog&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:    - &lt;span style=&#34;color:#f92672&#34;&gt;task&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DownloadBuildArtifacts@0&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Download Artifacts&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;inputs&lt;/span&gt;:        &lt;span style=&#34;color:#f92672&#34;&gt;buildType&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;current&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;downloadType&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;specific&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;itemPattern&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;**&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;downloadPath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(System.ArtifactsDirectory)&amp;#39;&lt;/span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;task&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;AzureCLI@2&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Copy web to Blob storage&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;inputs&lt;/span&gt;:        &lt;span style=&#34;color:#f92672&#34;&gt;azureSubscription&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$(azureSubscription)&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;scriptType&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bash&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;scriptLocation&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inlineScript&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;inlineScript&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;az storage blob upload-batch -d &amp;#39;$web&amp;#39; -s $(System.ArtifactsDirectory)/drop  --account-name $(storageAccountName) --account-key $(storageAccountKey)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to make the pipeline reusable, I took out all literals and placed them into variables. These variables are maintained in the Azure DevOps Library section below.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://blog.somethingAzure.com/devops-all-the-way.png&#34; alt=&#34;Pipeline variables&#34;&gt;&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Practice what you preach!</title>
       <link>https://blog.somethingAzure.com/posts/practice-what-you-preach/</link>
       <pubDate>Tue, 27 Jul 2021 10:14:26 +0200</pubDate>
       <author>bas@vd-sande.nl (Bas van de Sande)</author>
       <guid>https://blog.somethingAzure.com/posts/practice-what-you-preach/</guid>
       <description>&lt;p&gt;When I decided to start blogging again, I knew I wanted to talk about the things I face, working with Azure.In the past I used to blog as well, back then I blogged on my Journey into CRM which I started in 2014.&lt;/p&gt;&lt;p&gt;In 2014 the state of technology was much different; one would use WordPress (or similar). The main choice was host it yourself or host it at a hosting provider. Back then I chose the way of hosting it myself on a small linux appliance from my basement.&lt;/p&gt;&lt;p&gt;For starters I knew, I didn&amp;rsquo;t want to host this new blog myself! Too much hassle&amp;hellip; being responsible for applying continuous security updates, having to worry about power supply, state of hardware and connectivity. Starting a new blog, gave me the opportunity to start with a clean slate. Since I decided to start blogging about Azure, I knew I had to run it on Azure. &lt;strong&gt;Practice what you preach!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using Azure to host a blog, gives you a lot of possibilities to choose the technologies you feel comfortable with. However running on Azure means you have to take into account that running on Azure might cost you money. Choosing the right technologies and plans might save you some serious money in the end.&lt;/p&gt;&lt;p&gt;After some research on the web and talking to my &lt;strong&gt;&lt;a href=&#34;https://xpirit.com/company/team/&#34;&gt;colleagues&lt;/a&gt;&lt;/strong&gt; the tool Hugo popped up many times. &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; is a static website generator that uses markdown files for its input. This means that I can use a simple text editor to write my content. Run the Hugo tool to compile a wbsite and then upload it to static storage to host my website; I don&amp;rsquo;t need an app plan. I just need storage, domain name (dns provider) and an SSL certificate.  &lt;strong&gt;Poof! mind blowing&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;I decided to give it a try, downloaded Hugo, chose a template and compiled a website. That was a breeze! The next step was to create a resource group and a storage account. On the storage account I had to enable the &lt;a href=&#34;https://azure.microsoft.com/nl-nl/blog/static-websites-on-azure-storage-now-generally-available/&#34;&gt;static Website&lt;/a&gt; option.&lt;/p&gt;&lt;p&gt;By enabling the static website option, Azure creates a &lt;strong&gt;$web&lt;/strong&gt; folder in which the content of the site has to be placed. By placing the content in the folder, the website was up-and-running under an &amp;ldquo;ugly&amp;rdquo; Azure url.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://blog.somethingAzure.com/customdomainblog.png&#34; alt=&#34;Custom Domain Name&#34;&gt;&lt;/p&gt;&lt;p&gt;Next step was to apply the custom domain name to the website. This was done under the Networking option, custom domain tab. This resulted in a website that could be accessed over the unsecured Http protocol and under single domain name. I was almost there.&lt;/p&gt;&lt;p&gt;The final step was to use a SSL certificate to secure the connection to the website. Unfortunatelly the Azure storage account does not provide an option to use your own certificate for your custom domain name. In order to do that I had to resort to the Azure CDN option (Content Delivery Network). By choosing that option I was able to run a secured website accessible under multiple domain names.&lt;/p&gt;&lt;p&gt;When looking at the cost side of things - I run this blog on an Azure pay-as-you-go consumption plan - the costs will be approximately € 1,37 per month. Not a bad deal at all.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://blog.somethingAzure.com/estimatedcostblog.png&#34; alt=&#34;Costs&#34;&gt;&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Introduction</title>
       <link>https://blog.somethingAzure.com/posts/introduction/</link>
       <pubDate>Sat, 24 Jul 2021 12:20:25 +0200</pubDate>
       <author>bas@vd-sande.nl (Bas van de Sande)</author>
       <guid>https://blog.somethingAzure.com/posts/introduction/</guid>
       <description>&lt;p&gt;You have found my personal blog. This blog will be focused around Microsoft Azure technologies, hence the name &amp;ldquo;something Azure&amp;rdquo;. Let me introduce myself, my name is Bas van de Sande and I work as an Azure Coding Architect at &lt;a href=&#34;https://www.xpirit.com&#34;&gt;&lt;strong&gt;Xpirit&lt;/strong&gt;&lt;/a&gt; in the Netherlands.&lt;/p&gt;&lt;p&gt;As part of  my daily job, I offer technical guidance, advice and hands-on assistance for a large number of (global) companies in various industries.&lt;/p&gt;&lt;p&gt;I have been working with Microsoft technologies since 1995 in various technical roles, since that time I have seen a large number of technologies passing by (Visual Studio technologies, SQL Server, BizTalk, Microsoft.Net, SharePoint, Dynamics CE etc). In one of my former jobs I have been doing product development on the Dynamics CE platform annd back then I used to blog very actively on my journey into CRM. Over the years I came to realize, that the continuous story of my life is system integration.&lt;/p&gt;&lt;p&gt;About three years ago, I got more and more involved in Microsoft Azure. In order to learn as much as I could about this fascinating platform, I decided to start studying again. After a devoting my evening hours, I passed the most important certification exams: Microsoft Azure Administrator Associate, Microsoft Azure DevOps Engineer Expert, Microsoft Azure Solution Architect Expert, Microsoft Azure Security Associate and Microsoft Azure IoT Developer. By the time I passed these exams, I realized that the the time had come for me to join the experts at Xpirit.&lt;/p&gt;&lt;p&gt;In this blog I&amp;rsquo;ll write about my learnings and insights. Furthermore I&amp;rsquo;ll be with (for me) new technologies. I might help you to avoid some pitfalls or it might spark some inspiration to start doing epic sh*t!&lt;/p&gt;&lt;p&gt;I hope you enjoy this blog,&lt;/p&gt;&lt;p&gt;Bas.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://blog.somethingAzure.com/doepicshit.png&#34; alt=&#34;#doepicshit&#34;&gt;&lt;/p&gt;</description>
     </item>
   
 </channel>
</rss>
