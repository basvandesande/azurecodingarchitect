<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>development on Azure Coding Architect</title><link>https://azurecodingarchitect.com/categories/development/</link><description>Recent content in development on Azure Coding Architect</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 28 Dec 2022 13:20:25 +0200</lastBuildDate><atom:link href="https://azurecodingarchitect.com/categories/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Project Volterra - Windows Dev Kit 2023 - take 1</title><link>https://azurecodingarchitect.com/posts/volterra-take1/</link><pubDate>Wed, 28 Dec 2022 13:20:25 +0200</pubDate><guid>https://azurecodingarchitect.com/posts/volterra-take1/</guid><description>At Xpirit we have multiple times per year an Innovation Day. The idea of an Innovation Day is to work on technologies or topics that sparked your interest. Anything is allowed, as long as it has nothing to do with any customer assignments. Learning and sharing is the goal of such day.
At our last Innovation Day in november, I picked up the idea to get some hands on experience with the Windows Dev Kit 2023 also known as Project Volterra.</description></item><item><title>Minikube, a lightweight Kubernetes-to-go!</title><link>https://azurecodingarchitect.com/posts/minikube/</link><pubDate>Fri, 02 Dec 2022 13:20:25 +0200</pubDate><guid>https://azurecodingarchitect.com/posts/minikube/</guid><description>From time-to-time I find myself tinkering with Kubernetes. I love the idea that I can create any type of workload (e.g. a simple webapp or a backend service), pick it up and put it somewhere else to run. Not having to care if it is in the cloud or on an on-premise cluster. However developing your application, testing its core in a local docker container and then deploying it to kubernetes can sometimes be cumberstone.</description></item><item><title>Real world mocking! Http Service testing in C# using Wiremock.Net</title><link>https://azurecodingarchitect.com/posts/wiremock_net/</link><pubDate>Fri, 28 Oct 2022 14:09:18 +0200</pubDate><guid>https://azurecodingarchitect.com/posts/wiremock_net/</guid><description>At Xpirit we have a culture of never ending learning. One of the best ways of learning new things, is by doing it. To take the plunge and do the deep dive.
In this case my colleague Kristoff Riebbels learned me some new tricks by introducing me into the world of WireMock.Net. Together we wrote a magazine article for Xpirit Magazine #13.
In this blog post I want to share this article with you.</description></item><item><title>Over-The-Air device update - IoT with C#</title><link>https://azurecodingarchitect.com/posts/ota-update/</link><pubDate>Mon, 01 Aug 2022 12:32:35 +0200</pubDate><guid>https://azurecodingarchitect.com/posts/ota-update/</guid><description>Developing solutions for IoT devices can be a challenging task, this can also apply for getting a device at its final destination in order to do its job. When time passes by, it is likely that either requirements or conditions are changing and that the device is not capable anymore of doing its job. In other words, it needs to be updated. This is where the real problems may start. In many cases devices are not physically accessible or there are simply too many devices in the field to do manual updates.</description></item><item><title>Register ESP32 to DPS &amp; IoT hub - IoT with C#</title><link>https://azurecodingarchitect.com/posts/iot-nanoframework-dps/</link><pubDate>Thu, 28 Apr 2022 21:09:06 +0200</pubDate><guid>https://azurecodingarchitect.com/posts/iot-nanoframework-dps/</guid><description>In my previous post I flashed my ESP32 with the nanoframework.net, allowing me to write C# code in Visual Studio with all bells and whistles. As life goes&amp;hellip; the device landed in my drawer until this week where I had some time to experiment. This time I wanted to hook up the device to Azure IoT hub using the Device Provisioning Service (DPS) which brings me one step closer to my goal, performing device updates over-the-air&amp;hellip;</description></item><item><title>From 0 to 100 in 30 minutes - IoT with C#</title><link>https://azurecodingarchitect.com/posts/prepare-for-iot/</link><pubDate>Tue, 15 Mar 2022 20:28:06 +0200</pubDate><guid>https://azurecodingarchitect.com/posts/prepare-for-iot/</guid><description>My interest for the Internet of Things (IoT) was sparked many moons ago, way before the name was born. Back in the days I wrote software for PalmOS devices, and I was intrigued by having raw processor power in my Pocket. Don&amp;rsquo;t get me wrong, back then we where talking Megahertz instead of Gigahertz and Kilobyte instead of Gigabyte. Having such limitations in processing power and memory tickled my creativity. When I had the opportunity to control hardware (gps, electronic locks etc) using the little devices I was sold.</description></item><item><title>Running a persistent SQL Server in Docker</title><link>https://azurecodingarchitect.com/posts/persistent-sql-docker/</link><pubDate>Sat, 05 Mar 2022 17:46:30 +0200</pubDate><guid>https://azurecodingarchitect.com/posts/persistent-sql-docker/</guid><description>In IT we always want to work with the latest and greatest, it&amp;rsquo;s in our DNA to explore new technologies. From time-to-time you get confronted with legacy technologies, robust but boring. One of such things is a piece of software I wrote more than 15 years ago for a friend. It was an application using a SQL Server database that controlled a couple of weighing terminals connected over RS232. Controlling machines is every geek&amp;rsquo;s dream.</description></item></channel></rss>